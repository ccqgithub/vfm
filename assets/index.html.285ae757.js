import{_ as a,c as s}from"./app.db1850dc.js";const n={},e=s(`<h1 id="apis" tabindex="-1"><a class="header-anchor" href="#apis" aria-hidden="true">#</a> APIs</h1><h2 id="createform" tabindex="-1"><a class="header-anchor" href="#createform" aria-hidden="true">#</a> createForm</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> form<span class="token operator">:</span> FormInstance <span class="token operator">=</span> <span class="token generic-function"><span class="token function">createForm</span><span class="token generic class-name"><span class="token operator">&lt;</span>FormType<span class="token punctuation">,</span> VirtualFieldKeys<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>args<span class="token operator">:</span> CreageFormArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><code>FormType</code> extends <code>Record&lt;string, any&gt;</code>: The form structure type definition.</li><li><code>FormType</code> extends <code>string</code>: The virtual field keys type(e.g. <code>&#39;virtualFieldA&#39; | &#39;virtualFieldB&#39;</code>).</li><li>CreageFormArgs: <ul><li><code>initValues</code>: The initial form values, required.</li><li><code>defaultValues</code>: Form default values, used for reset fields, and determine whether fields are dirty. If not pass, same with <code>initValues</code>.</li><li><code>touchType</code>: When to set touched status, &#39;BLUR&#39; or &#39;FOCUS&#39;, default is &#39;BLUR&#39;.</li><li><code>readonly</code>: if true, the form.state is readonly, avoid to manual edit it.</li></ul></li></ul><h2 id="form-mount" tabindex="-1"><a class="header-anchor" href="#form-mount" aria-hidden="true">#</a> <code>form.mount</code></h2><p><code>form.mount()</code></p><p>Set form is mounted, this will start watchers for form state changes and start validates.</p><h2 id="form-unmount" tabindex="-1"><a class="header-anchor" href="#form-unmount" aria-hidden="true">#</a> <code>form.unmount</code></h2><p><code>form.unmount()</code></p><p>Set form is unmounted, this will ummounte watchers and stop validates.</p><h2 id="form-registerfield" tabindex="-1"><a class="header-anchor" href="#form-registerfield" aria-hidden="true">#</a> <code>form.registerField</code></h2><p><code>form.registerField&lt;Name, Deps&gt;(name, args: RegisterFieldArgs)</code></p><ul><li><code>name</code>: Field name(e.g, <code>a</code>, <code>a.b</code>, <code>a.0.b</code>).</li><li><code>RegisterFieldArgs</code><ul><li><code>rules</code>: <a href="#fieldrule">FieldRule</a>[]. The validate rules.</li><li><code>immediate</code>: <code>boolean</code>. If false, validates and watchers not start immediate, need manual start(<code>registerFieldReturn.register()</code>).</li><li><code>transform</code>: <code>(value) =&gt; validateValue</code>. Transform value before validate.</li><li><code>isEqual</code>: <code>(value, defaultValue) =&gt; boolean</code>. Determine whether the field is dirty, default use <code>===</code>.</li><li><code>onFocus</code>: <code>() =&gt; void</code>. Invoke when field focus, use this to custom focus logic.</li><li><code>deps</code>: <code>() =&gt; any</code>, If the return value of <code>deps</code> change, the field will revalidate.</li></ul></li></ul><p>Returns: <code>{ register, field }</code></p><ul><li><code>register: () =&gt; void</code>: Start watchers and validates.</li><li><code>field</code>: The field instance.</li></ul><h2 id="form-registervirtualfield" tabindex="-1"><a class="header-anchor" href="#form-registervirtualfield" aria-hidden="true">#</a> <code>form.registerVirtualField</code></h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">registerVirtualField</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">N</span> <span class="token keyword">extends</span> <span class="token constant">VFK</span> <span class="token operator">=</span> <span class="token constant">VFK</span><span class="token punctuation">,</span> <span class="token constant">V</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>
  name<span class="token operator">:</span> <span class="token constant">N</span><span class="token punctuation">,</span>
  args<span class="token operator">:</span> RegisterVirtualFieldArgs
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>name</code>: Field name(e.g, <code>a</code>, <code>b</code>)</li><li><code>RegisterVirtualFieldArgs</code><ul><li><code>rules</code>: <a href="#virtualfieldrule">VirtualFieldRule</a>[]. The validate rules.</li><li><code>value: () =&gt; any</code>. The value use to validate, if the return value change, revalidate.</li><li><code>immediate</code>: <code>boolean</code>. If false, validates and watchers not start immediate, need manual start(<code>registerVirtualFieldReturn.register()</code>).</li></ul></li></ul><h2 id="form-unregisterfield" tabindex="-1"><a class="header-anchor" href="#form-unregisterfield" aria-hidden="true">#</a> <code>form.unregisterField</code></h2><p><code>form.unregisterField(name)</code></p><p>Unregister a field.</p><h2 id="form-unregistervirtualfield" tabindex="-1"><a class="header-anchor" href="#form-unregistervirtualfield" aria-hidden="true">#</a> <code>form.unregisterVirtualField</code></h2><p><code>form.unregisterVirtualField(name)</code></p><p>Unregister a virtual field.</p><h2 id="form-setvalue" tabindex="-1"><a class="header-anchor" href="#form-setvalue" aria-hidden="true">#</a> <code>form.setValue</code></h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>form.setValie(name, value)
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>Set a field&#39;s value.</p><h2 id="form-getvalue" tabindex="-1"><a class="header-anchor" href="#form-getvalue" aria-hidden="true">#</a> <code>form.getValue</code></h2><p><code>form.getValue(name)</code></p><p>Get a field&#39;s value.</p><h2 id="form-settouched" tabindex="-1"><a class="header-anchor" href="#form-settouched" aria-hidden="true">#</a> <code>form.setTouched</code></h2><p><code>form.setTouched(name, touched = true)</code></p><p>Mark a field is touched</p><h2 id="form-setfocus" tabindex="-1"><a class="header-anchor" href="#form-setfocus" aria-hidden="true">#</a> <code>form.setFocus</code></h2><p><code>form.setFocus(name)</code></p><p>Focus a field.</p><h2 id="form-fielderror" tabindex="-1"><a class="header-anchor" href="#form-fielderror" aria-hidden="true">#</a> <code>form.fieldError</code></h2><p><code>form.fieldError(name) =&gt; FieldError | null</code></p><p>Get the field&#39;s error</p><ul><li><a href="#fieldError">FieldError</a></li></ul><h2 id="form-virtualfielderror" tabindex="-1"><a class="header-anchor" href="#form-virtualfielderror" aria-hidden="true">#</a> <code>form.virtualFieldError</code></h2><p><code>form.virtualFieldError(name) =&gt; FieldError | null</code></p><p>Get the virtual field&#39;s error</p><ul><li><a href="#fieldError">FieldError</a></li></ul><h2 id="form-iserror" tabindex="-1"><a class="header-anchor" href="#form-iserror" aria-hidden="true">#</a> <code>form.isError</code></h2><p><code>form.isError(name) =&gt; boolean</code></p><h2 id="form-isvirtualerror" tabindex="-1"><a class="header-anchor" href="#form-isvirtualerror" aria-hidden="true">#</a> <code>form.isVirtualError</code></h2><p><code>form.isVirtualError(name) =&gt; boolean</code></p><h2 id="form-ischanged" tabindex="-1"><a class="header-anchor" href="#form-ischanged" aria-hidden="true">#</a> <code>form.isChanged</code></h2><p><code>form.isChanged(name) =&gt; boolean</code></p><h2 id="form-istouched" tabindex="-1"><a class="header-anchor" href="#form-istouched" aria-hidden="true">#</a> <code>form.isTouched</code></h2><p><code>form.isTouched(name) =&gt; boolean</code></p><h2 id="form-isdirty" tabindex="-1"><a class="header-anchor" href="#form-isdirty" aria-hidden="true">#</a> <code>form.isDirty</code></h2><p><code>form.isDirty(name) =&gt; boolean</code></p><h2 id="form-resetfield" tabindex="-1"><a class="header-anchor" href="#form-resetfield" aria-hidden="true">#</a> <code>form.resetField</code></h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">resetField</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">N</span> <span class="token keyword">extends</span> FieldPath<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span></span></span><span class="token punctuation">(</span>
  name<span class="token operator">:</span> <span class="token constant">N</span><span class="token punctuation">,</span>
  args<span class="token operator">:</span> <span class="token punctuation">{</span>
    keepTouched<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    keepChanged<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    keepValue<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    value<span class="token operator">?</span><span class="token operator">:</span> KeyPathValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    defaultValue<span class="token operator">?</span><span class="token operator">:</span> KeyPathValue<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">N</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h2 id="form-reset" tabindex="-1"><a class="header-anchor" href="#form-reset" aria-hidden="true">#</a> <code>form.reset</code></h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">reset</span><span class="token punctuation">(</span>
  args<span class="token operator">:</span> <span class="token punctuation">{</span>
    values<span class="token operator">?</span><span class="token operator">:</span> FieldValues<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    defaultValues<span class="token operator">?</span><span class="token operator">:</span> FieldValues<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
    keepValues<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    keepDefaultValues<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    keepTouched<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    keepChanged<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    keepIsSubmitted<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
    keepSubmitCount<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="form-submit" tabindex="-1"><a class="header-anchor" href="#form-submit" aria-hidden="true">#</a> <code>form.submit</code></h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">submit</span><span class="token punctuation">(</span>
  args<span class="token operator">:</span> <span class="token punctuation">{</span>
    onSuccess<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>data<span class="token operator">:</span> FieldValues<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
    onError<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">(</span>error<span class="token operator">:</span> FieldError<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">void</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="fieldrule" tabindex="-1"><a class="header-anchor" href="#fieldrule" aria-hidden="true">#</a> FieldRule</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FieldRule</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// short flags</span>
  required<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  requiredLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  minLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  maxLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  min<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  max<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  pattern<span class="token operator">?</span><span class="token operator">:</span> RegExp<span class="token punctuation">;</span>
  <span class="token comment">// builtin validators</span>
  alpha<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  alphaNum<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  decimal<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  numeric<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  email<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  integer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  ipAddress<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  macAddress<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">// custom validator</span>
  validator<span class="token operator">?</span><span class="token operator">:</span> Validator<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token punctuation">,</span> Deps<span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token comment">// message</span>
  message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="virtualfieldrule" tabindex="-1"><a class="header-anchor" href="#virtualfieldrule" aria-hidden="true">#</a> VirtualFieldRule</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">VirtualFieldRule</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  <span class="token comment">// short flags</span>
  required<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  requiredLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  minLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  maxLength<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  min<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  max<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
  pattern<span class="token operator">?</span><span class="token operator">:</span> RegExp<span class="token punctuation">;</span>
  <span class="token comment">// builtin validators</span>
  alpha<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  alphaNum<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  decimal<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  numeric<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  email<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  integer<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  ipAddress<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  macAddress<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span><span class="token punctuation">;</span>
  <span class="token comment">// custom validator</span>
  validator<span class="token operator">?</span><span class="token operator">:</span> VirtualFieldValidator<span class="token operator">&lt;</span><span class="token constant">V</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
  <span class="token comment">// message</span>
  message<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="fielderror" tabindex="-1"><a class="header-anchor" href="#fielderror" aria-hidden="true">#</a> FieldError</h2><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name">FieldError</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
  type<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
  message<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,66);function o(p,t){return e}var l=a(n,[["render",o],["__file","index.html.vue"]]);export{l as default};
